//
//  ContentView.swift
//  SpotSense
//
//  Created by Â∞èÁéâÊï¶ÈÉé on 2025/02/22.
//

import SwiftUI
import CoreLocation

struct ContentView: View {
    @EnvironmentObject private var beaconManager: BeaconManager  // AppDelegate„Åã„ÇâÂèñÂæó
    private var mqttManager: MQTTManager { beaconManager.mqttManagerInstance } // BeaconManager„Åã„ÇâÂèñÂæó
    @StateObject private var logmanager = LogManager.shared

    @ObservedObject var userData = UserData.shared
    
    @State private var showAlert = false // „Ç¢„É©„Éº„Éà„ÅÆË°®Á§∫Áä∂ÊÖã„ÇíÁÆ°ÁêÜ
    
    // „Ç¢„Éó„É™„ÅÆ„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´„ÇíÁõ£Ë¶ñ
    @Environment(\.scenePhase) private var scenePhase
    // ÁîªÈù¢ÈÅ∑Áßª„ÅÆÊôÇ„Å´‰ΩøÁî®„Åô„ÇãboolÂÄ§
    @State private var isPresented: Bool = false
    
    @State private var isConfigured = false // Ë®≠ÂÆöÊ∏à„Åø„Éï„É©„Ç∞

    private var notificationutils = NotificationUtils.shared
    
    // ÂàùÊúüÂÄ§„ÄÄÊúÄÂàù„Å´„Åì„Åì„ÅÆÂÄ§„ÅåuserDefaults„Å´‰øùÂ≠ò„Åï„Çå„Çã
    // „ÅÇ„Å°„Åì„Å°„Å´ÂàùÊúüÂÄ§„Åå„ÅÇ„Çã„ÅåÔºå„Åì„Åì„ÅÆÂÄ§„ÅåUserDefaults„Å´‰øùÂ≠ò„Åï„Çå„Çã„ÅÆ„Åß„ÄÅ„Åì„Åì„Å†„Åë‰øÆÊ≠£„Åô„Çå„Å∞ËâØ„ÅÑ
    private var defaultUuidFields: [String] = ["00002a19", "0000", "1000", "8000", "00805f9b34fb"]
    //private var defaultMqttHost: String = "test.mosquitto.org"  // for test
    private var defaultMqttHost: String = "RD227-1021.intra.sharedom.net"
    private var defaultMqttPort: String = "1883"
    private var defaultRangingCount: String = "3"
    private var defaultNotificationFlg: Bool = true
    private var defaultLoggingFlg: Bool = false

    init() {
    }
    
    var body: some View {
        VStack (spacing: 1){
            Spacer()
            HStack{
                Spacer()
                Image("SpotSense")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 25, height: 25)
                    .padding()
                Text("SpotSense")
                    .font(.title2)
                Spacer()
                Button(action: { // Ë®≠ÂÆö„Éú„Çø„É≥„ÅåÊäº„Åï„Çå„Åü
                    beaconManager.stopMonitoring()
                    isPresented = true
                }) {
                    Image(systemName: "gearshape")
                }
                .padding()
                .fullScreenCover(isPresented: $isPresented) {
                    SettingView(onDismiss: handleDismiss)
                }
            }
            List {
                Section {
                    ForEach(beaconManager.detectedBeacons, id:  \.uniqueID) { beacon in
                        VStack(alignment: .leading) {
                            Text("Major: \(beacon.major), Minor: \(beacon.minor)")
                                .font(.headline)
                            Text("Distance: \(String(format: "%.2f", beacon.accuracy)) m")
                                .font(.subheadline)
                        }
                    }
                } header: {
                    Text("Detected Beacons")
                        .font(.subheadline)
                        .foregroundColor(.primary)
                        .textCase(nil)
                }
            }
            .frame(height: 200)
            .padding()

            List {
                Section {
                    ForEach(logmanager.logs, id: \.self) { log in
                        Text(log)
                            .font(.body)
                            .foregroundColor(.primary)
                    }
                } header: {
                    Text("Log") // Header „Å´ "Log" „ÇíË°®Á§∫
                        .font(.subheadline) // Ë¶ãÂá∫„Åó„ÅÆ„Éï„Ç©„É≥„Éà„Çπ„Çø„Ç§„É´
                        .foregroundColor(.primary) // „ÉÜ„Ç≠„Çπ„Éà„ÅÆËâ≤
                        .textCase(nil) // Â§ßÊñáÂ≠óÂ§âÊèõ„ÇíÁÑ°Âäπ„Å´„Åô„Çã
                }
            }
            .frame(height: 250) // „É™„Çπ„ÉàÂÖ®‰Ωì„ÅÆÈ´ò„Åï„ÇíÂà∂Èôê
            .id(UUID())
            .onAppear {
                logmanager.logs = logmanager.retrieveLogsFromUserDefaults()
            }
            .onChange(of: scenePhase) { oldPahse, newPhase in
                if newPhase == .active {
                    logmanager.logs = logmanager.retrieveLogsFromUserDefaults() // „Ç¢„Éó„É™„Åå„Éï„Ç©„Ç¢„Ç∞„É©„Ç¶„É≥„Éâ„Å´„Å™„Å£„Åü„ÇâÊõ¥Êñ∞
                    print("connect=",mqttManager.isConnected)
                }
            }
            .padding()
            Text("Your OA Number: \(userData.userId)")
            Text("Connection Status: \(mqttManager.isConnected ? "Connected" : "Disconnected")")
                .foregroundColor(mqttManager.isConnected ? .green : .red)
                .padding()
        }
        .onAppear {
            if !isConfigured {
                beaconManager.configure(with: mqttManager)
                          isConfigured = true
                      }
            beaconManager.requestLocationPermission(completion: { _ in })
            notificationutils.requestPermission()
            // UserDefaults„Åã„Çâ‰øùÂ≠ò„Åï„Çå„ÅüID„ÇíÂèñÂæó„Åô„Çã
            if retrieveUserData() {
                beaconManager.startMonitoring()
                print("üì° ContentView appeared. BeaconManager started.")
            } else {
                showAlert = true
            }
        }
        .alert("OAÁï™Âè∑„ÅåÊú™Ë®≠ÂÆö„Åß„Åô", isPresented: $showAlert) {
            Button("OK") {
            isPresented = true
            }
        } message: {
            Text("Ê¨°„Å´Ë°®Á§∫„Åï„Çå„ÇãSettingsÁîªÈù¢„ÅßÔºåOAÁï™Âè∑„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        }
        .onChange(of: scenePhase) { oldPhase, newPhase in
            if newPhase == .active {
                // „Ç¢„Éó„É™Ëµ∑ÂãïÊ§úÁü•ÊôÇ„Å´„Éï„É©„Ç∞„ÉªÈÄöÁü•„Éª„Éê„ÉÉ„Ç∏„Çí„É™„Çª„ÉÉ„Éà
                UNUserNotificationCenter.current().setBadgeCount(0)
                UNUserNotificationCenter.current().removeAllDeliveredNotifications()
                UserDefaults.standard.set(true, forKey: "hasLaunchedSinceReboot")
                RebootDetector.shared.clearRebootFlag()
            }
        }
    }
    
    // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÁî®„ÅÆ„ÇØ„É≠„Éº„Ç∏„É£„ÇíÂÆöÁæ©
    private func handleDismiss() {
        print("SettingView„ÅåÈñâ„Åò„Åæ„Åó„Åü")
        if userData.userId == "" {
           showAlert = true
            return
        }
        beaconManager.startMonitoring()
        print("üì° SettingsView closed. BeaconManager started.")
    }
    
    // UserDefaults„Åã„ÇâÂèñ„ÇäÂá∫„Åó
    private func retrieveUserData() -> Bool {
        var id_ok = false
        
        if let storedId = UserDefaults.standard.string(forKey: "savedUserId") {
            userData.userId = storedId
            id_ok = true
        }
        
        if let storedBeaconUuid: [String] = UserDefaults.standard.array(forKey: "uuidFields") as? [String] {
            userData.beaconUuidString = String(storedBeaconUuid.joined(separator: "-"))
            //print(String(storedBeaconUuid.joined(separator: "-")))
        } else {
            UserDefaults.standard.set(defaultUuidFields, forKey: "uuidFields")
            userData.beaconUuidString = String(defaultUuidFields.joined(separator: "-"))
        }
        
        if let storedMqttHost = UserDefaults.standard.string(forKey: "mqttHost") {
            userData.mqttHost = storedMqttHost
        } else {
            UserDefaults.standard.set(defaultMqttHost, forKey: "mqttHost")
            userData.mqttHost = defaultMqttHost
        }
        
        if let storedMqttPort = UserDefaults.standard.string(forKey: "mqttPort") {
            userData.mqttPort = Int(storedMqttPort)!
        } else {
            UserDefaults.standard.set(defaultMqttPort, forKey: "mqttPort")
            userData.mqttPort = Int(defaultMqttPort)!
        }
        
        if let storedCount = UserDefaults.standard.string(forKey: "rangingCount") {
            userData.rangingCount = Int(storedCount)!
        } else {
            UserDefaults.standard.set(defaultRangingCount, forKey: "rangingCount")
            userData.rangingCount = Int(defaultRangingCount)!
        }
        
        if let flgValue = UserDefaults.standard.object(forKey: "notificationFlg") as? Bool {
            userData.notificationFlg = flgValue
        } else {
            UserDefaults.standard.set(defaultNotificationFlg, forKey: "notificationFlg")
            userData.notificationFlg = defaultNotificationFlg
        }
        
        if let logFlg = UserDefaults.standard.object(forKey: "loggingFlg") as? Bool {
            userData.loggingFlg = logFlg
        } else {
            UserDefaults.standard.set(defaultLoggingFlg, forKey: "loggingFlg")
            userData.loggingFlg = defaultLoggingFlg
        }
        print("id_ok=\(id_ok)")
        return (id_ok)
    }
}

#Preview {
    ContentView()
        .environmentObject(BeaconManager())
}

class UserData: ObservableObject {
    @Published var userId: String = ""
    @Published var beaconUuidString: String = ""
    @Published var mqttHost: String = ""
    @Published var mqttPort: Int = 0
    @Published var rangingCount: Int = 0
    @Published var isChanged: Bool = false
    @Published var notificationFlg: Bool = true
    @Published var loggingFlg: Bool = false
    static let shared = UserData() // „Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
    private init() {} // „Éó„É©„Ç§„Éô„Éº„Éà„Å™ÂàùÊúüÂåñ„Åß„Ç§„É≥„Çπ„Çø„É≥„ÇπÂåñ„ÇíÂà∂Èôê
}
